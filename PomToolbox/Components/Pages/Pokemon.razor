@page "/pokemon"
@rendermode InteractiveServer

@using PomToolbox.Components
@using PomToolbox.Services.Interfaces
@using PomToolbox.UIModels
@using PomToolbox.Services
@using PomToolbox.Data.Models

@using PokemonTcgSdk.Standard.Features.FilterBuilder.Pokemon
@using PokemonTcgSdk.Standard.Features.FilterBuilder.Trainer
@using PokemonTcgSdk.Standard.Infrastructure.HttpClients.Set
@using PokemonCardApi = PokemonTcgSdk.Standard.Infrastructure.HttpClients.Cards.PokemonCard
@using Blazored.LocalStorage;

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject IPokemonTcgApiService PokemonTcgApiService

@inject IPokeCollectionCardRepository PokeCollectionCardRepository
@inject IPokemonCollectionRepository PokemonCollectionRepository
@inject IPokemonCardRepository PokemonCardRepository

<PageTitle>Pokemon</PageTitle>

<Loader Display="@searchingInProgress" />
<Toaster @ref="toaster"/>

@if (userSavedCards.Count > 0) {
    <button class="btn btn-primary btn-circle fixed bottom-10 right-10 z-2 shadow-lg btn-lg" onclick="collection_modal.showModal()">
        <div class="badge badge-accent badge-sm rounded-full absolute -top-2 -right-2 shadow">
            @userSavedCards.Count
        </div>
        <i class="fa-regular fa-rectangle-list text-primary-content"></i>
    </button>
}

<dialog id="collection_modal" class="modal">
  <div class="modal-box bg-base-200">
    <div class="flex items-center gap-4 mb-4">
        <h3 class="text-lg">Your Collection</h3>
        <h5 class="font-bold ml-auto">Total: <span>$@userSavedCardsTotal.ToString("0.00")</span></h5>
        <button class="btn btn-primary btn-outline" @onclick="SaveCollection">Save Collection</button>
    </div>
    @if (userSavedCards.Count == 0) {
        <p>No items added to collection</p>
    }
    <div class="flex flex-col gap-4">
    @foreach (var (card, index) in userSavedCards.Select((card, index) => (card, index))) {
        <div class="card card-side bg-base-100 shadow-sm p-3">
            <figure>
                <img class="max-h-[200px] p-2" src="@card?.Images?.Small?.ToString()"/>
            </figure>
            <div class="card-body p-4">
                <h2 class="card-title">@card?.Name?.ToString()</h2>
                <p class="badge badge-soft badge-accent my-2 mx-0">@card?.Rarity?.ToString()</p>
                <p class="my-2">
                    Market: 
                    <strong>
                        @(card?.Tcgplayer?.Prices?.Holofoil?.Market != null ? "$" + card.Tcgplayer.Prices.Holofoil.Market.ToString("0.00") : "N/A")
                    </strong>
                </p>
                <div class="card-actions justify-end">
                    <button class="btn btn-error btn-outline btn-circle" @onclick="@(()=> RemoveCard(index))">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    }
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<div class="hero bg-base-200 grow">
    <div class="hero-content text-center mb-10!">
        <div class="max-w-md">
            <form id="pokemon-search-form" @onsubmit="SearchForCards">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <label class="input">
                        <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></g></svg>
                        <input @bind-value="searchValue" @bind-value:event="oninput" type="search" class="grow" placeholder="Search" />
                    </label>
                    <select class="select" @bind="searchSeries" @bind:event="onchange" @bind:after="SearchForCards">
                        <option selected value="">Any Series</option>
                        @foreach (string series in setSeries) {
                            <option value="@series">@series</option>
                        }
                    </select>
                </div>
            </form>
        </div>
    </div>
</div>

@* TODO: Make below a component *@
@if (matchedPokemonCards.Count > 0) {
    <div class="w-full bg-base-200 mb-auto grow py-4">
        <div class="w-full md:w-3xl xl:w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 xl:grid-cols-5 gap-6 justify-items-center">
        @foreach (PokemonCardApi card in matchedPokemonCards) {
            <div class="card bg-base-100 shadow-sm border-primary transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-lg">
                <figure>
                    <img class="p-3" src="@card?.Images?.Small?.ToString()"/>
                </figure>
                <div class="card-body gap-0 p-5 pt-2">
                    <h2 class="card-title">@card?.Name?.ToString()</h2>
                    <p>@card?.Set?.Name?.ToString()</p>
                    <p class="badge badge-soft badge-accent my-2 mx-0">@card?.Rarity?.ToString()</p>
                    <p class="my-2">
                        Market: 
                        <strong>
                            @(card?.Tcgplayer?.Prices?.Holofoil?.Market != null ? "$" + card.Tcgplayer.Prices.Holofoil.Market.ToString("0.00") : "N/A")
                        </strong>
                    </p>
                    <div class="card-actions mt-4 justify-between items-center">
                        <a href="@card?.Tcgplayer?.Url.ToString()" target="_blank">
                            <img class="object-contain max-w-[50px]" src="/assets/logos/tcgplayer-logo.webp" alt="tcgplayer-logo">
                        </a>
                        <button class="btn btn-primary btn-outline btn-circle" @onclick="@(()=> { if (card != null) AddCard(card);})">
                            <i class="fa-solid fa-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
        </div>
    </div>
}


@code {
    private bool searchingInProgress = false;
    private Toaster? toaster;
    private List<PokemonCardApi> matchedPokemonCards = [];
    private string searchValue = "";
    private List<string> setSeries = [
        "Scarlet & Violet",
        "Sword & Shield",
        "Sun & Moon",
        "XY",
    ];
    private string searchSeries = "";

    private List<PokemonCardApi> userSavedCards = [];
    private double userSavedCardsTotal = 0.00;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        bool triggerStateChanged = false;
        if (firstRender) {
            if (await LocalStorage.ContainKeyAsync("savedCards")) {
                List<PokemonCardApi>? localStorageSavedCards = await LocalStorage.GetItemAsync<List<PokemonCardApi>>("savedCards");
                if (localStorageSavedCards != null) {
                    userSavedCards = localStorageSavedCards;
                    triggerStateChanged = true;
                }
            }

            if (await LocalStorage.ContainKeyAsync("savedCardsTotal")) {
                double? localStorageSavedCardsTotal = await LocalStorage.GetItemAsync<Double>("savedCardsTotal");
                if (localStorageSavedCardsTotal != null) {
                    userSavedCardsTotal = localStorageSavedCardsTotal.GetValueOrDefault(0.00);
                    triggerStateChanged = true;
                }
            }
        }

        if (triggerStateChanged) {
            StateHasChanged();
        }
    }

    private void AddCard(PokemonCardApi card) {
        userSavedCards.Add(card);

        double cardMarketPrice = card.Tcgplayer?.Prices?.Holofoil?.Market ?? 0.00;
        userSavedCardsTotal = userSavedCardsTotal + cardMarketPrice;

        LocalStorage.SetItemAsync("savedCards", userSavedCards);
        LocalStorage.SetItemAsync("savedCardsTotal", userSavedCardsTotal);

        #pragma warning disable CS4014 // Just show the toast
        toaster?.AddToast(Toast.ToastType.Success, $"Added {card.Name} to your collection for ${cardMarketPrice.ToString("0.00")}");
    }

    private void RemoveCard(int cardIndex) {
        PokemonCardApi card = userSavedCards.ElementAt(cardIndex);
        userSavedCardsTotal = userSavedCardsTotal - (card.Tcgplayer?.Prices?.Holofoil?.Market ?? 0.00);

        userSavedCards.RemoveAt(cardIndex);

        LocalStorage.SetItemAsync("savedCards", userSavedCards);
        LocalStorage.SetItemAsync("savedCardsTotal", userSavedCardsTotal);
        toaster?.AddToast(Toast.ToastType.Success, $"Removed {card.Name} from your collection");

        // Reset the items if there's now no more items
        if (userSavedCards.Count == 0) {
            userSavedCardsTotal = 0.00;
            LocalStorage.RemoveItemAsync("savedCards");
            LocalStorage.RemoveItemAsync("savedCardsTotal");
        }
    }

    private async Task SearchForCards() {
        if (searchValue.Trim().Length == 0) {
            return;
        }
        searchingInProgress = true;
        List<PokemonCardApi> searchedCardResults = await SearchPokemons();

        if (searchedCardResults.Count == 0) {
            toaster?.AddToast(Toast.ToastType.Warning, "No cards were found");
        } else {
            matchedPokemonCards = searchedCardResults;
        }
        searchingInProgress = false;
    }

    private async Task<List<PokemonCardApi>> SearchPokemons() {
        string formattedSearchValue = searchValue.ToLower().Trim();
        PokemonFilterCollection<string, string> pokemonCardsFilter = PokemonFilterBuilder.CreatePokemonFilter();
        pokemonCardsFilter.AddName(searchValue.ToLower() + "*");

        if (searchSeries.Length > 0) {
            pokemonCardsFilter.AddSetSeries(searchSeries);
        }

        return await PokemonTcgApiService.GetPokemonCards(pokemonCardsFilter); 
    }

    private async Task SaveCollection() {
        List<PokemonCard> cardsList = [];

        // Convert the Api Cards to our type of PokemonCard
        foreach (PokemonCardApi savedCard in userSavedCards) {
            DateTime formattedTcgPlayerUpdated = DateTime.Now;
            if (savedCard.Tcgplayer?.UpdatedAt != null) {
                formattedTcgPlayerUpdated = DateTime.ParseExact(
                    savedCard.Tcgplayer.UpdatedAt.ToString(), 
                    "yyyy/MM/dd",
                    System.Globalization.CultureInfo.InvariantCulture);
            }
            PokemonCard card = new PokemonCard {
                ApiId = savedCard.Id,
                Name = savedCard.Name.ToString(),
                Set = savedCard.Set.Name.ToString(),
                Series = savedCard.Set.Series.ToString(),
                AverageTcgPlayerPrice = savedCard.Tcgplayer?.Prices?.Holofoil?.Market,
                TcgPlayerPriceLastUpdated = formattedTcgPlayerUpdated,
            };

            cardsList.Add(card);
        }

        List<PokemonCard> databaseCards = [];
        // Add any cards that don't already exist
        foreach (PokemonCard card in cardsList) {
            PokemonCard? existingCard = await PokemonCardRepository.GetByApiId(card.ApiId);

            if (existingCard == null) {
                existingCard = await PokemonCardRepository.Create(card);
            }

            databaseCards.Add(existingCard);
        }

        PokemonCollection collection = new PokemonCollection {
            Name = "My Collection",
        };
        PokemonCollection createdCollection = await PokemonCollectionRepository.Create(collection);

        foreach (PokemonCard card in databaseCards) {
            PokeCollectionCard collectionCard = new PokeCollectionCard {
                PokemonCardId = card.Id,
                PokemonCollectionId = createdCollection.Id,
            };
            await PokeCollectionCardRepository.Create(collectionCard);
        }

        LocalStorage.RemoveItemAsync("savedCards");
        LocalStorage.RemoveItemAsync("savedCardsTotal");
        toaster?.AddToast(Toast.ToastType.Success, "Collection saved. Redirecting...");
        await Task.Delay(2500);
        NavigationManager.NavigateTo($"/Collection/{createdCollection.Uuid}");
    }
}
