@page "/collection/{collectionId}"
@rendermode InteractiveServer

@using PomToolbox.Components
@using PomToolbox.UIModels;
@using PomToolbox.Services.Interfaces
@using PomToolbox.Data.Models;
@using Soenneker.Blazor.DataTables.Options;

@inject NavigationManager NavigationManager
@inject IPokemonCollectionRepository PokemonCollectionRepository
@inject IPokemonCollectionService PokemonCollectionService

<PageTitle>View Collection</PageTitle>

<Toaster @ref="toaster"/>

@if (collection == null) {
    <p><em>Loading...</em></p>
} else {
    <div class="w-full bg-base-200 mb-auto grow py-4">
        <div class="w-full md:w-3xl xl:w-7xl mx-auto">
            <div class="card max-w-sm bg-base-100 card-md shadow-sm mx-4 mb-4">
                <div class="card-body">
                    <h2 class="card-title">Calculator</h2>
                    <div class="flex">
                        <label class="max-w-50">
                            <span class="mb-2 block">
                                Exclude under
                                <div class="tooltip tooltip-primary" data-tip="Excludes cards under this price from the total">
                                    <i class="fa-solid fa-circle-info"></i>
                                </div>
                            </span>
                            <div class="input">
                                $<input type="number" step="0.01" @bind-value="excludeUnderCost" @bind-value:event="oninput" placeholder="0.00" />
                            </div>
                        </label>
                    </div>
                    <fieldset class="fieldset">
                        <legend class="fieldset-legend">
                            Offset:
                            <div class="tooltip tooltip-primary font-normal" data-tip="Offsets the total cost by a percentage">
                                <i class="fa-solid fa-circle-info"></i>
                            </div>
                        </legend>
                        <label class="input">
                            <input type="number" step="0.01" @bind-value="totalOffsetPercentage" @bind-value:event="oninput" placeholder="100.00" />%
                        </label>
                    </fieldset>
                    <h4 class="mt-4">Total Collection Value: $@totalCollectionCost.ToString("0.00")</h4>
                    <h4 class="text-accent font-bold">Calculated Value: $@totalCalculatedCost.ToString("0.00")</h4>
                </div>
            </div>
            <DataTable class="table" Options="tableOptions">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Set</th>
                        <th>TCG Avg</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (PokeCollectionCard association in collection?.PokeCollectionCards ?? []) {
                        <tr class="hover">
                            <td>
                                <div class="tooltip tooltip-right">
                                    <div class="tooltip-content">
                                        <img class="shadow" src="@association.PokemonCard?.ImageUrlSmall.ToString()"/>
                                    </div>
                                    <img class="max-h-[100px] shadow-sm" src="@association.PokemonCard?.ImageUrlSmall.ToString()"/>
                                </div>
                            </td>
                            <td>
                                <span class="tooltip tooltip-secondary mb-2" data-tip="Go to TCGPlayer">
                                    <a href="@association.PokemonCard?.TcgPlayerUrl.ToString()" class="link" target="_blank">
                                        @($"{association.PokemonCard?.Name.ToString()} - {association.PokemonCard?.Number.ToString()}")
                                    </a>
                                </span><br>
                                <div class="badge badge-soft badge-secondary h-auto">
                                    @association.PokemonCard?.Rarity.ToString()
                                </div>
                            </td>
                            <td>@association.PokemonCard?.Set.ToString()</td>
                            <td>
                                <a class="link link-primary tooltip tooltip-secondary" href="javascript:void(0);">
                                    <div class="tooltip-content">
                                        <span>
                                            Last Updated:<br> @association.PokemonCard?.TcgPlayerPriceLastUpdated.ToString("MM/dd/yyyy")
                                        </span>
                                    </div>
                                    @(association.PokemonCard?.AverageTcgPlayerPrice != null ? $"${association.PokemonCard?.AverageTcgPlayerPrice?.ToString("0.00")}" : "N/A")
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </DataTable>
        </div>
    </div>
}

@code{
    [Parameter]
    public string? collectionId { get; set; }
    public PokemonCollection? collection { get; set; }
    public List<PokemonCard> userCards = [];
    private Toaster? toaster;
    private DataTableOptions? tableOptions;

    public double totalCollectionCost { 
        get {
            return collection?.PokeCollectionCards?.Sum(pc => {
                double avgPrice = pc.PokemonCard?.AverageTcgPlayerPrice ?? 0.00;
                if (avgPrice < excludeUnderCost) {
                    return 0.00;
                }
                return avgPrice;
            }) ?? 0.00;
        }
        set {
            totalCollectionCost = value;
        }
    }
    public double totalOffsetPercentage { get; set; } = 100.00;
    public double excludeUnderCost { get; set; } = 0.00;
    public double totalCalculatedCost {
        get {
            return totalCollectionCost * (totalOffsetPercentage / 100);
        }
        set {
            totalCollectionCost = value;
        }
    }

    protected override async Task OnParametersSetAsync() {
        await base.OnParametersSetAsync();

        if (collectionId != null) {
            PokemonCollection? initialCollection = await PokemonCollectionRepository.GetByUuid(collectionId);
            if (initialCollection == null) {
                toaster?.AddToast(Toast.ToastType.Warning, "Collection not found. Redirecting...");
                await Task.Delay(2500);
                NavigationManager.NavigateTo("/pokemon");
                return;
            }
            await PokemonCollectionService.GetUpdatedCollectionCards(initialCollection);
            // Get the updated collection
            collection = await PokemonCollectionRepository.GetByUuid(collectionId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) {
            if (collection == null) {
                toaster?.AddToast(Toast.ToastType.Warning, "Collection not found. Redirecting...");
                await Task.Delay(2500);
                NavigationManager.NavigateTo("/pokemon");
            }

            this.tableOptions = new DataTableOptions {
                Searching = true,
                LengthChange = false,
                Info = false,
                Paging = true,
                Order = [new object[] {0, "asc"}]
            };

            toaster?.AddToast(Toast.ToastType.Info, "Share this collection by copying the URL.");
        }
    }
}