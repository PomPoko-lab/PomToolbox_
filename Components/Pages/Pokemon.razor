@page "/pokemon"
@rendermode InteractiveServer
@using PomToolbox.Services.Interfaces
@using PokemonTcgSdk.Standard.Features.FilterBuilder.Pokemon
@using PokemonTcgSdk.Standard.Features.FilterBuilder.Trainer
@using PokemonTcgSdk.Standard.Infrastructure.HttpClients.Set
@using PokemonTcgSdk.Standard.Infrastructure.HttpClients.Cards
@inject IPokemonTcgApiService PokemonTcgApiService
@inject IJSRuntime JSRuntime

@if (searchingInProgress) {
    <Loader />
}

<div class="hero bg-base-200 grow">
    <div class="hero-content text-center mb-10!">
        <div class="max-w-md">
            <form id="pokemon-search-form" @onsubmit="SearchForCards">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <label class="input">
                        <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></g></svg>
                        <input @bind-value="searchValue" @bind-value:event="oninput" type="search" class="grow" placeholder="Search" />
                    </label>
                    <select class="select" @bind="searchSeries" @bind:event="onchange" @bind:after="SearchForCards">
                        <option selected value="">Any Series</option>
                        @foreach (string series in setSeries) {
                            <option value="@series">@series</option>
                        }
                    </select>
                </div>
            </form>
        </div>
    </div>
</div>

@if (matchedPokemonCards.Count > 0 || matchedTrainerCards.Count > 0) {
    <div class="w-full bg-base-200 mb-auto">
        <div class="w-full md:w-2xl xl:w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 xl:grid-cols-5 gap-6 justify-items-center">
        @foreach (PokemonCard card in matchedPokemonCards) {
            <a href="@card.Tcgplayer?.Url.ToString()" target="_blank" class="tooltip">
                <div class="tooltip-content">
                    <span>Market Value: @(card?.Tcgplayer?.Prices?.Holofoil?.Market != null ? "$" + card.Tcgplayer.Prices.Holofoil.Market.ToString("0.00") : "N/A")</span>
                </div>
                <div class="rounded-xl overflow-hidden drop-shadow-md flex hover:scale-105 hover:z-1 hover:drop-shadow-xl transition duration-300 ease-in-out">
                    <img src="@card?.Images?.Small?.ToString()" alt="">
                </div>
            </a>
        }
        @foreach (TrainerCard card in matchedTrainerCards) {
            <a href="@card.Tcgplayer?.Url.ToString()" target="_blank" class="tooltip">
                <div class="tooltip-content">
                    <span>Market Value: @(card?.Tcgplayer?.Prices?.Holofoil?.Market != null ? "$" + card.Tcgplayer.Prices.Holofoil.Market.ToString("0.00") : "N/A")</span>
                </div>
                <div class="rounded-xl overflow-hidden drop-shadow-md flex hover:scale-105 hover:z-1 hover:drop-shadow-xl transition duration-300 ease-in-out">
                    <img src="@card?.Images?.Small?.ToString()" alt="">
                </div>
            </a>
        }
        </div>
    </div>
}


@code {
    private Boolean searchingInProgress = false;
    private List<Card> matchedCards = [];
    private List<PokemonCard> matchedPokemonCards = [];
    private List<TrainerCard> matchedTrainerCards = [];
    private string searchValue = "";
    private List<string> setSeries = [
        "Scarlet & Violet",
        "Sword & Shield",
        "Sun & Moon",
        "XY",
    ];
    private string searchSeries = "";

    @* protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            sets = await PokemonTcgApiService.GetSets();
            if (sets.Count > 0) {
                disabledSetsInput = false;
            }
        }
    } *@

    private async Task SearchForCards()
    {
        if (searchValue.Trim().Length == 0) {
            return;
        }
        searchingInProgress = true;

        matchedPokemonCards = await SearchPokemons();

        searchingInProgress = false;
    }

    private async Task<List<PokemonCard>> SearchPokemons() {
        string formattedSearchValue = searchValue.ToLower().Trim();
        PokemonFilterCollection<string, string> pokemonCardsFilter = PokemonFilterBuilder.CreatePokemonFilter();
        pokemonCardsFilter.AddName(searchValue.ToLower() + "*");

        if (searchSeries.Length > 0) {
            pokemonCardsFilter.AddSetSeries(searchSeries);
        }

        return await PokemonTcgApiService.GetPokemonCards(pokemonCardsFilter); 
    }
}
