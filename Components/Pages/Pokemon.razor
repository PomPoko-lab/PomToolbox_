@page "/pokemon"
@rendermode InteractiveServer
@using PomToolbox.Services.Interfaces
@using PokemonTcgSdk.Standard.Infrastructure.HttpClients.Cards
@inject IPokemonTcgApiService PokemonTcgApiService
@inject IJSRuntime JSRuntime

<div class="hero bg-base-200 grow">
    <div class="hero-content text-center mb-10!">
        <div class="max-w-md">
            <label class="input lg:min-w-sm">
                <svg class="h-[1em] opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g stroke-linejoin="round" stroke-linecap="round" stroke-width="2.5" fill="none" stroke="currentColor"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></g></svg>
                <input @bind-value="searchValue" @bind-value:event="oninput" type="search" class="grow" placeholder="Search" />
            </label>
            <button class="btn btn-primary" @onclick="SearchForCards">Search</button>
        </div>
    </div>
</div>

<div class="w-full bg-base-200">
    <div class="w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 justify-items-center">
    @foreach (PokemonCard card in matchedCards) {
        <div class="rounded-xl overflow-hidden drop-shadow-md flex hover:scale-110 hover:z-1 hover:drop-shadow-xl transition duration-300 ease-in-out">
            <img src="@card.Images.Large.ToString()" alt="">
        </div>
    }
    </div>
</div>


@code {
    private List<PokemonCard> matchedCards = [];
    private string searchValue = "";

    private async Task SearchForCards()
    {
        if (searchValue.Trim().Length == 0) {
            return;
        }
        string formattedSearchValue = searchValue.ToLower().Trim();
        matchedCards = await PokemonTcgApiService.GetPokemonByName(formattedSearchValue);
        await JSRuntime.InvokeVoidAsync("console.log", "Results: ");
        matchedCards.ForEach(async card => {
        await JSRuntime.InvokeVoidAsync("console.log", card.Name.ToString());
        });
    }
}
